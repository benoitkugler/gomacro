// Code generated by gomacro/typescript/urls_api.go. DO NOT EDIT

export type Int = number & { __opaque__: "Int" };
export type IdDossier = number & { __opaque__: "IdDossier" };
// github.com/benoitkugler/gomacro/analysis/httpapi/test.controller
export type controller = Record<string, never>;

/** Endpoints exposes the HTTP urls handled by the server. */
export class Endpoints {
  constructor(private baseURL: string) {}

  handler() {
    return this.baseURL + "/const_url_from_package/" + ``;
  }

  handle1() {
    return this.baseURL + "const_local_url" + ``;
  }

  HandleExt(query1: string, query2: string) {
    return (
      this.baseURL +
      "/const_url_from_inner_package/" +
      `?query1=${query1}&query2=${query2}`
    );
  }

  handler2() {
    return this.baseURL + "/const_url_from_inner_package/endpoint" + ``;
  }

  Anonymous5861747() {
    return (
      this.baseURL +
      "/const_url_from_inner_package/endpoint/entoher/const_local_url" +
      ``
    );
  }

  handler3() {
    return this.baseURL + "host/const_url_from_inner_package/" + ``;
  }

  handler4() {
    return this.baseURL + "hostendpoint" + ``;
  }

  handler5() {
    return this.baseURL + "/string_litteral" + ``;
  }

  handler6() {
    return this.baseURL + "/with_param/:param" + ``;
  }

  handler7(my_bool: boolean, my_int: Int) {
    return (
      this.baseURL +
      "/special_param_value/:class/route" +
      `?my-bool=${my_bool ? "YES" : ""}&my-int=${my_int}`
    );
  }

  handler8(query_param1: string, query_param2: string) {
    return (
      this.baseURL +
      "/special_param_value/:default/route" +
      `?query_param1=${query_param1}&query_param2=${query_param2}`
    );
  }

  TopLevel() {
    return this.baseURL + "/extern function" + ``;
  }

  Anonymous5862146() {
    return this.baseURL + "/func litteral" + ``;
  }

  handler9() {
    return this.baseURL + "/download" + ``;
  }

  handler10(param_name: IdDossier) {
    return this.baseURL + "/with_generic" + `?param-name=${param_name}`;
  }

  Anonymous5862333(token: string) {
    return this.baseURL + "/with middleware" + `?token=${token}`;
  }
}
