package test

import (
	"math/rand"
	"time"

	"github.com/benoitkugler/gomacro/testutils/testsource"
	"github.com/benoitkugler/gomacro/testutils/testsource/subpackage"
)

// Code generated by gomacro/generator/go/randdata. DO NOT EDIT.

func randAr5_Ar5_bool() [5][5]bool {
	var out [5][5]bool
	for i := range out {
		out[i] = randAr5_bool()
	}
	return out
}

func randAr5_bool() [5]bool {
	var out [5]bool
	for i := range out {
		out[i] = randbool()
	}
	return out
}

func randMapintint() map[int]int {
	l := 40 + rand.Intn(10)
	out := make(map[int]int, l)
	for i := 0; i < l; i++ {
		out[randint()] = randint()
	}
	return out
}

func randMaptes_EnumIntbool() map[testsource.EnumInt]bool {
	l := 40 + rand.Intn(10)
	out := make(map[testsource.EnumInt]bool, l)
	for i := 0; i < l; i++ {
		out[randtes_EnumInt()] = randbool()
	}
	return out
}

func randSliceint() []int {
	l := 3 + rand.Intn(5)
	out := make([]int, l)
	for i := range out {
		out[i] = randint()
	}
	return out
}

func randSlicesub_Enum() []subpackage.Enum {
	l := 3 + rand.Intn(5)
	out := make([]subpackage.Enum, l)
	for i := range out {
		out[i] = randsub_Enum()
	}
	return out
}

func randSlicetes_ItfType() []testsource.ItfType {
	l := 3 + rand.Intn(5)
	out := make([]testsource.ItfType, l)
	for i := range out {
		out[i] = randtes_ItfType()
	}
	return out
}

func randSlicetes_RecursiveType() []testsource.RecursiveType {
	l := 3 + rand.Intn(5)
	out := make([]testsource.RecursiveType, l)
	for i := range out {
		out[i] = randtes_RecursiveType()
	}
	return out
}

func randbool() bool {
	i := rand.Int31n(2)
	return i == 1
}

func randfloat64() float64 {
	return rand.Float64() * float64(rand.Int31())
}

func randint() int {
	return int(rand.Intn(1000000))
}

func randint64() int64 {
	return int64(rand.Intn(1000000))
}

var letterRunes2 = []rune("azertyuiopqsdfghjklmwxcvbn123456789é@!?&èïab ")

func randstring() string {
	b := make([]rune, 10)
	maxLength := len(letterRunes2)
	for i := range b {
		b[i] = letterRunes2[rand.Intn(maxLength)]
	}
	return string(b)
}

func randsub_Enum() subpackage.Enum {
	choix := [...]subpackage.Enum{subpackage.A, subpackage.B, subpackage.C}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randsub_NamedSlice() subpackage.NamedSlice {
	return subpackage.NamedSlice(randSlicesub_Enum())
}

func randsub_StructWithComment() subpackage.StructWithComment {
	var s subpackage.StructWithComment
	s.A = randint()

	return s
}

func randtDate() time.Time {
	return time.Unix(int64(rand.Int31()), 5)
}

func randtTime() time.Time {
	return time.Unix(int64(rand.Int31()), 5)
}

func randtes_Basic1() testsource.Basic1 {
	return testsource.Basic1(randint())
}

func randtes_Basic2() testsource.Basic2 {
	return testsource.Basic2(randbool())
}

func randtes_Basic3() testsource.Basic3 {
	return testsource.Basic3(randfloat64())
}

func randtes_Basic4() testsource.Basic4 {
	return testsource.Basic4(randstring())
}

func randtes_ComplexStruct() testsource.ComplexStruct {
	var s testsource.ComplexStruct
	s.DictWithTag = randMapintint()
	s.NoJSON = randtes_EnumInt()
	s.Time = randtTime()
	s.B = randstring()
	s.Value = randtes_ItfType()
	s.L = randtes_ItfList()
	s.A = randint()
	s.E = randtes_EnumInt()
	s.E2 = randtes_EnumUInt()
	s.Date = randtes_MyDate()
	s.F = randAr5_Ar5_bool()
	s.Imported = randsub_StructWithComment()
	s.EnumMap = randMaptes_EnumIntbool()
	s.OptID1 = randtes_Generic_tes_IdCamp()
	s.OptID2 = randtes_Generic_tes_IdFile()

	return s
}

func randtes_ConcretType1() testsource.ConcretType1 {
	var s testsource.ConcretType1
	s.List2 = randSliceint()
	s.V = randint()

	return s
}

func randtes_ConcretType2() testsource.ConcretType2 {
	var s testsource.ConcretType2
	s.D = randfloat64()

	return s
}

func randtes_EnumInt() testsource.EnumInt {
	choix := [...]testsource.EnumInt{testsource.Ai, testsource.Bi, testsource.Ci, testsource.Di}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randtes_EnumUInt() testsource.EnumUInt {
	choix := [...]testsource.EnumUInt{testsource.A, testsource.B, testsource.C, testsource.D}
	i := rand.Intn(len(choix))
	return choix[i]
}

func randtes_Generic_tes_IdCamp() testsource.Generic[testsource.IdCamp] {
	var s testsource.Generic[testsource.IdCamp]
	s.Id = randtes_IdCamp()

	return s
}

func randtes_Generic_tes_IdFile() testsource.Generic[testsource.IdFile] {
	var s testsource.Generic[testsource.IdFile]
	s.Id = randtes_IdFile()

	return s
}

func randtes_IdCamp() testsource.IdCamp {
	return testsource.IdCamp(randint64())
}

func randtes_IdFile() testsource.IdFile {
	return testsource.IdFile(randint64())
}

func randtes_ItfList() testsource.ItfList {
	return testsource.ItfList(randSlicetes_ItfType())
}

func randtes_ItfType() testsource.ItfType {
	choix := [...]testsource.ItfType{
		randtes_ConcretType1(),
		randtes_ConcretType2(),
	}
	i := rand.Intn(2)
	return choix[i]
}

func randtes_ItfType2() testsource.ItfType2 {
	choix := [...]testsource.ItfType2{
		randtes_ConcretType1(),
	}
	i := rand.Intn(1)
	return choix[i]
}

func randtes_MyDate() testsource.MyDate {
	return testsource.MyDate(randtDate())
}

func randtes_RecursiveType() testsource.RecursiveType {
	var s testsource.RecursiveType
	s.Children = randSlicetes_RecursiveType()

	return s
}

func randtes_StructWithExternalRef() testsource.StructWithExternalRef {
	var s testsource.StructWithExternalRef
	s.Field1 = randsub_NamedSlice()
	s.Field2 = randsub_NamedSlice()
	s.Field3 = randint()

	return s
}

func randtes_WithOpaque() testsource.WithOpaque {
	var s testsource.WithOpaque
	s.F1 = randtes_StructWithExternalRef()
	s.F2 = randtes_RecursiveType()
	s.F3 = randtes_StructWithExternalRef()

	return s
}
