// Code generated by gomacro/generator/dart. DO NOT EDIT

// github.com/benoitkugler/gomacro/cmd/test.S
class S implements Union {
  final String d;
  final int a;
  final int b;
  final int c;

  const S(this.d, this.a, this.b, this.c);

  @override
  String toString() {
    return "S($d, $a, $b, $c)";
  }
}

S sFromJson(dynamic json_) {
  final json = (json_ as JSON);
  return S(stringFromJson(json['D']), intFromJson(json['A']),
      intFromJson(json['B']), intFromJson(json['C']));
}

JSON sToJson(S item) {
  return {
    "D": stringToJson(item.d),
    "A": intToJson(item.a),
    "B": intToJson(item.b),
    "C": intToJson(item.c)
  };
}

String stringFromJson(dynamic json) => json == null ? "" : json as String;

String stringToJson(String item) => item;

/// github.com/benoitkugler/gomacro/cmd/test.Union
abstract class Union {}

Union unionFromJson(dynamic json_) {
  final json = json_ as JSON;
  final kind = json['Kind'] as String;
  final data = json['Data'];
  switch (kind) {
    case "S":
      return sFromJson(data);
    default:
      throw ("unexpected type");
  }
}

JSON unionToJson(Union item) {
  if (item is S) {
    return {'Kind': "S", 'Data': sToJson(item)};
  } else {
    throw ("unexpected type");
  }
}

typedef JSON = Map<String, dynamic>; // alias to shorten JSON convertors
int intFromJson(dynamic json) => json as int;

int intToJson(int item) => item;
